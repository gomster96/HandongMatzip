{"version":3,"sources":["Pager.tsx"],"names":["React","StyleSheet","TextInput","Keyboard","I18nManager","PanGestureHandler","State","Animated","Easing","memoize","Clock","Value","onChange","and","abs","add","block","call","ceil","clockRunning","cond","divide","eq","event","floor","greaterThan","lessThan","max","min","multiply","neq","not","round","set","spring","startClock","stopClock","sub","timing","TRUE","FALSE","NOOP","UNSET","DIRECTION_LEFT","DIRECTION_RIGHT","SWIPE_DISTANCE_MINIMUM","SWIPE_VELOCITY_IMPACT","SPRING_CONFIG","stiffness","damping","mass","overshootClamping","restDisplacementThreshold","restSpeedThreshold","TIMING_CONFIG","duration","easing","out","cubic","Pager","clock","velocityX","gestureX","gestureState","UNDETERMINED","offsetX","progress","props","navigationState","index","layout","width","nextIndex","lastEnteredIndex","isSwiping","isSwipeGesture","indexAtSwipeEnd","routesLength","routes","length","layoutWidth","swipeVelocityImpact","position","springConfig","undefined","timingConfig","initialVelocityForSpring","currentIndexValue","pendingIndexValue","previouslyFocusedTextInput","enterListeners","jumpToIndex","setValue","jumpTo","key","keyboardDismissMode","onIndexChange","findIndex","route","dismiss","addListener","type","listener","push","removeListener","indexOf","splice","handleEnteredIndexChange","value","Math","forEach","transitionTo","toValue","frameTime","state","time","finished","isRTL","velocity","handleGestureEvent","nativeEvent","translationX","extrapolatedPosition","translateX","forceUpdate","currentIndex","onSwipeStart","onSwipeEnd","input","currentlyFocusedField","blurTextInput","focusTextInput","ACTIVE","getTranslateX","prevProps","swipeEnabled","children","removeClippedSubviews","gestureHandlerProps","render","styles","container","transform","Component","defaultProps","create","flex","flexDirection"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, TextInput, Keyboard, I18nManager } from 'react-native';\nimport { PanGestureHandler, State } from 'react-native-gesture-handler';\nimport Animated, { Easing } from 'react-native-reanimated';\nimport memoize from './memoize';\n\nimport {\n  Layout,\n  NavigationState,\n  Route,\n  Listener,\n  PagerCommonProps,\n  EventEmitterProps,\n} from './types';\n\ntype Binary = 0 | 1;\n\ntype Props<T extends Route> = PagerCommonProps & {\n  onIndexChange: (index: number) => void;\n  navigationState: NavigationState<T>;\n  layout: Layout;\n  // Clip unfocused views to improve memory usage\n  // Don't enable this on iOS where this is buggy and views don't re-appear\n  removeClippedSubviews?: boolean;\n  children: (\n    props: EventEmitterProps & {\n      // Animated value which represents the state of current index\n      // It can include fractional digits as it represents the intermediate value\n      position: Animated.Node<number>;\n      // Function to actually render the content of the pager\n      // The parent component takes care of rendering\n      render: (children: React.ReactNode) => React.ReactNode;\n      // Callback to call when switching the tab\n      // The tab switch animation is performed even if the index in state is unchanged\n      jumpTo: (key: string) => void;\n    }\n  ) => React.ReactNode;\n  gestureHandlerProps: React.ComponentProps<typeof PanGestureHandler>;\n};\n\nconst {\n  Clock,\n  Value,\n  onChange,\n  and,\n  abs,\n  add,\n  block,\n  call,\n  ceil,\n  clockRunning,\n  cond,\n  divide,\n  eq,\n  event,\n  floor,\n  greaterThan,\n  lessThan,\n  max,\n  min,\n  multiply,\n  neq,\n  not,\n  round,\n  set,\n  spring,\n  startClock,\n  stopClock,\n  sub,\n  timing,\n} = Animated;\n\nconst TRUE = 1;\nconst FALSE = 0;\nconst NOOP = 0;\nconst UNSET = -1;\n\nconst DIRECTION_LEFT = 1;\nconst DIRECTION_RIGHT = -1;\n\nconst SWIPE_DISTANCE_MINIMUM = 20;\n\nconst SWIPE_VELOCITY_IMPACT = 0.2;\n\nconst SPRING_CONFIG = {\n  stiffness: 1000,\n  damping: 500,\n  mass: 3,\n  overshootClamping: true,\n  restDisplacementThreshold: 0.01,\n  restSpeedThreshold: 0.01,\n};\n\nconst TIMING_CONFIG = {\n  duration: 200,\n  easing: Easing.out(Easing.cubic),\n};\n\nexport default class Pager<T extends Route> extends React.Component<Props<T>> {\n  static defaultProps = {\n    swipeVelocityImpact: SWIPE_VELOCITY_IMPACT,\n  };\n\n  componentDidUpdate(prevProps: Props<T>) {\n    const {\n      navigationState,\n      layout,\n      swipeVelocityImpact,\n      springConfig,\n      timingConfig,\n    } = this.props;\n    const { index, routes } = navigationState;\n\n    if (\n      // Check for index in state to avoid unintended transition if component updates during swipe\n      (index !== prevProps.navigationState.index &&\n        index !== this.currentIndexValue) ||\n      // Check if the user updated the index correctly after an update\n      (typeof this.pendingIndexValue === 'number' &&\n        index !== this.pendingIndexValue)\n    ) {\n      // Index in user's state is different from the index being tracked\n      this.jumpToIndex(index);\n    }\n\n    // Reset the pending index\n    this.pendingIndexValue = undefined;\n\n    // Update our mappings of animated nodes when props change\n    if (prevProps.navigationState.routes.length !== routes.length) {\n      this.routesLength.setValue(routes.length);\n    }\n\n    if (prevProps.layout.width !== layout.width) {\n      this.progress.setValue(-index * layout.width);\n      this.layoutWidth.setValue(layout.width);\n    }\n\n    if (prevProps.swipeVelocityImpact !== swipeVelocityImpact) {\n      this.swipeVelocityImpact.setValue(\n        swipeVelocityImpact != null\n          ? swipeVelocityImpact\n          : SWIPE_VELOCITY_IMPACT\n      );\n    }\n\n    if (prevProps.springConfig !== springConfig) {\n      this.springConfig.damping.setValue(\n        springConfig.damping !== undefined\n          ? springConfig.damping\n          : SPRING_CONFIG.damping\n      );\n\n      this.springConfig.mass.setValue(\n        springConfig.mass !== undefined ? springConfig.mass : SPRING_CONFIG.mass\n      );\n\n      this.springConfig.stiffness.setValue(\n        springConfig.stiffness !== undefined\n          ? springConfig.stiffness\n          : SPRING_CONFIG.stiffness\n      );\n\n      this.springConfig.restSpeedThreshold.setValue(\n        springConfig.restSpeedThreshold !== undefined\n          ? springConfig.restSpeedThreshold\n          : SPRING_CONFIG.restSpeedThreshold\n      );\n\n      this.springConfig.restDisplacementThreshold.setValue(\n        springConfig.restDisplacementThreshold !== undefined\n          ? springConfig.restDisplacementThreshold\n          : SPRING_CONFIG.restDisplacementThreshold\n      );\n    }\n\n    if (prevProps.timingConfig !== timingConfig) {\n      this.timingConfig.duration.setValue(\n        timingConfig.duration !== undefined\n          ? timingConfig.duration\n          : TIMING_CONFIG.duration\n      );\n    }\n  }\n\n  // Clock used for tab transition animations\n  private clock = new Clock();\n\n  // Current state of the gesture\n  private velocityX = new Value(0);\n  private gestureX = new Value(0);\n  private gestureState = new Value(State.UNDETERMINED);\n  private offsetX = new Value(0);\n\n  // Current progress of the page (translateX value)\n  private progress = new Value(\n    // Initial value is based on the index and page width\n    this.props.navigationState.index * this.props.layout.width * DIRECTION_RIGHT\n  );\n\n  // Initial index of the tabs\n  private index = new Value(this.props.navigationState.index);\n\n  // Next index of the tabs, updated for navigation from outside (tab press, state update)\n  private nextIndex: Animated.Value<number> = new Value(UNSET);\n\n  // Scene that was last entered\n  private lastEnteredIndex = new Value(this.props.navigationState.index);\n\n  // Whether the user is currently dragging the screen\n  private isSwiping: Animated.Value<Binary> = new Value(FALSE);\n\n  // Whether the update was due to swipe gesture\n  // This controls whether the transition will use a spring or timing animation\n  // Remember to set it before transition needs to occur\n  private isSwipeGesture: Animated.Value<Binary> = new Value(FALSE);\n\n  // Track the index value when a swipe gesture has ended\n  // This lets us know if a gesture end triggered a tab switch or not\n  private indexAtSwipeEnd: Animated.Value<number> = new Value(\n    this.props.navigationState.index\n  );\n\n  // Mappings to some prop values\n  // We use them in animation calculations, so we need live animated nodes\n  private routesLength = new Value(this.props.navigationState.routes.length);\n  private layoutWidth = new Value(this.props.layout.width);\n\n  // Determines how relevant is a velocity while calculating next position while swiping\n  private swipeVelocityImpact = new Value(\n    this.props.swipeVelocityImpact || SWIPE_VELOCITY_IMPACT\n  );\n\n  // The position value represent the position of the pager on a scale of 0 - routes.length-1\n  // It is calculated based on the translate value and layout width\n  // If we don't have the layout yet, we should return the current index\n  private position = cond(\n    this.layoutWidth,\n    divide(multiply(this.progress, -1), this.layoutWidth),\n    this.index\n  );\n\n  // Animation configuration\n  private springConfig = {\n    damping: new Value(\n      this.props.springConfig.damping !== undefined\n        ? this.props.springConfig.damping\n        : SPRING_CONFIG.damping\n    ),\n    mass: new Value(\n      this.props.springConfig.mass !== undefined\n        ? this.props.springConfig.mass\n        : SPRING_CONFIG.mass\n    ),\n    stiffness: new Value(\n      this.props.springConfig.stiffness !== undefined\n        ? this.props.springConfig.stiffness\n        : SPRING_CONFIG.stiffness\n    ),\n    restSpeedThreshold: new Value(\n      this.props.springConfig.restSpeedThreshold !== undefined\n        ? this.props.springConfig.restSpeedThreshold\n        : SPRING_CONFIG.restSpeedThreshold\n    ),\n    restDisplacementThreshold: new Value(\n      this.props.springConfig.restDisplacementThreshold !== undefined\n        ? this.props.springConfig.restDisplacementThreshold\n        : SPRING_CONFIG.restDisplacementThreshold\n    ),\n  };\n\n  private timingConfig = {\n    duration: new Value(\n      this.props.timingConfig.duration !== undefined\n        ? this.props.timingConfig.duration\n        : TIMING_CONFIG.duration\n    ),\n  };\n\n  // The reason for using this value instead of simply passing `this._velocity`\n  // into a spring animation is that we need to reverse it if we're using RTL mode.\n  // Also, it's not possible to pass multiplied value there, because\n  // value passed to STATE of spring (the first argument) has to be Animated.Value\n  // and it's not allowed to pass other nodes there. The result of multiplying is not an\n  // Animated.Value. So this value is being updated on each start of spring animation.\n  private initialVelocityForSpring = new Value(0);\n\n  // The current index change caused by the pager's animation\n  // The pager is used as a controlled component\n  // We need to keep track of the index to determine when to trigger animation\n  // The state will change at various points, we should only respond when we are out of sync\n  // This will ensure smoother animation and avoid weird glitches\n  private currentIndexValue = this.props.navigationState.index;\n\n  // The pending index value as result of state update caused by swipe gesture\n  // We need to set it when state changes from inside this component\n  // It also needs to be reset right after componentDidUpdate fires\n  private pendingIndexValue: number | undefined = undefined;\n\n  // Numeric id of the previously focused text input\n  // When a gesture didn't change the tab, we can restore the focused input with this\n  private previouslyFocusedTextInput: number | null = null;\n\n  // Listeners for the entered screen\n  private enterListeners: Listener[] = [];\n\n  private jumpToIndex = (index: number) => {\n    // If the index changed, we need to trigger a tab switch\n    this.isSwipeGesture.setValue(FALSE);\n    this.nextIndex.setValue(index);\n  };\n\n  private jumpTo = (key: string) => {\n    const { navigationState, keyboardDismissMode, onIndexChange } = this.props;\n\n    const index = navigationState.routes.findIndex(route => route.key === key);\n\n    // A tab switch might occur when we're in the middle of a transition\n    // In that case, the index might be same as before\n    // So we conditionally make the pager to update the position\n    if (navigationState.index === index) {\n      this.jumpToIndex(index);\n    } else {\n      onIndexChange(index);\n\n      // When the index changes, the focused input will no longer be in current tab\n      // So we should dismiss the keyboard\n      if (keyboardDismissMode === 'auto') {\n        Keyboard.dismiss();\n      }\n    }\n  };\n\n  private addListener = (type: 'enter', listener: Listener) => {\n    switch (type) {\n      case 'enter':\n        this.enterListeners.push(listener);\n        break;\n    }\n  };\n\n  private removeListener = (type: 'enter', listener: Listener) => {\n    switch (type) {\n      case 'enter': {\n        const index = this.enterListeners.indexOf(listener);\n\n        if (index > -1) {\n          this.enterListeners.splice(index, 1);\n        }\n\n        break;\n      }\n    }\n  };\n\n  private handleEnteredIndexChange = ([value]: readonly number[]) => {\n    const index = Math.max(\n      0,\n      Math.min(value, this.props.navigationState.routes.length - 1)\n    );\n\n    this.enterListeners.forEach(listener => listener(index));\n  };\n\n  private transitionTo = (index: Animated.Node<number>) => {\n    const toValue = new Value(0);\n    const frameTime = new Value(0);\n\n    const state = {\n      position: this.progress,\n      time: new Value(0),\n      finished: new Value(FALSE),\n    };\n\n    return block([\n      cond(clockRunning(this.clock), NOOP, [\n        // Animation wasn't running before\n        // Set the initial values and start the clock\n        set(toValue, multiply(index, this.layoutWidth, DIRECTION_RIGHT)),\n        set(frameTime, 0),\n        set(state.time, 0),\n        set(state.finished, FALSE),\n        set(this.index, index),\n        startClock(this.clock),\n      ]),\n      cond(\n        this.isSwipeGesture,\n        // Animate the values with a spring for swipe\n        [\n          cond(\n            not(clockRunning(this.clock)),\n            I18nManager.isRTL\n              ? set(this.initialVelocityForSpring, multiply(-1, this.velocityX))\n              : set(this.initialVelocityForSpring, this.velocityX)\n          ),\n          spring(\n            this.clock,\n            { ...state, velocity: this.initialVelocityForSpring },\n            { ...SPRING_CONFIG, ...this.springConfig, toValue }\n          ),\n        ],\n        // Otherwise use a timing animation for faster switching\n        timing(\n          this.clock,\n          { ...state, frameTime },\n          { ...TIMING_CONFIG, ...this.timingConfig, toValue }\n        )\n      ),\n      cond(state.finished, [\n        // Reset values\n        set(this.isSwipeGesture, FALSE),\n        set(this.gestureX, 0),\n        set(this.velocityX, 0),\n        // When the animation finishes, stop the clock\n        stopClock(this.clock),\n      ]),\n    ]);\n  };\n\n  private handleGestureEvent = event([\n    {\n      nativeEvent: {\n        translationX: this.gestureX,\n        velocityX: this.velocityX,\n        state: this.gestureState,\n      },\n    },\n  ]);\n\n  private extrapolatedPosition = add(\n    this.gestureX,\n    multiply(this.velocityX, this.swipeVelocityImpact)\n  );\n\n  private translateX = block([\n    onChange(\n      this.index,\n      call([this.index], ([value]) => {\n        this.currentIndexValue = value;\n\n        // Without this check, the pager can go to an infinite update <-> animate loop for sync updates\n        if (value !== this.props.navigationState.index) {\n          // If the index changed, and previous animation has finished, update state\n          this.props.onIndexChange(value);\n\n          this.pendingIndexValue = value;\n\n          // Force componentDidUpdate to fire, whether user does a setState or not\n          // This allows us to detect when the user drops the update and revert back\n          // It's necessary to make sure that the state stays in sync\n          this.forceUpdate();\n        }\n      })\n    ),\n    onChange(\n      this.position,\n      // Listen to updates in the position to detect when we enter a screen\n      // This is useful for things such as lazy loading when index change will fire too late\n      cond(\n        I18nManager.isRTL\n          ? lessThan(this.gestureX, 0)\n          : greaterThan(this.gestureX, 0),\n        // Based on the direction of the gesture, determine if we're entering the previous or next screen\n        cond(neq(floor(this.position), this.lastEnteredIndex), [\n          set(this.lastEnteredIndex, floor(this.position)),\n          call([floor(this.position)], this.handleEnteredIndexChange),\n        ]),\n        cond(neq(ceil(this.position), this.lastEnteredIndex), [\n          set(this.lastEnteredIndex, ceil(this.position)),\n          call([ceil(this.position)], this.handleEnteredIndexChange),\n        ])\n      )\n    ),\n    onChange(\n      this.isSwiping,\n      // Listen to updates for this value only when it changes\n      // Without `onChange`, this will fire even if the value didn't change\n      // We don't want to call the listeners if the value didn't change\n      call(\n        [this.isSwiping, this.indexAtSwipeEnd, this.index],\n        ([isSwiping, indexAtSwipeEnd, currentIndex]: readonly number[]) => {\n          const { keyboardDismissMode, onSwipeStart, onSwipeEnd } = this.props;\n\n          if (isSwiping === TRUE) {\n            onSwipeStart && onSwipeStart();\n\n            if (keyboardDismissMode === 'auto') {\n              const input = TextInput.State.currentlyFocusedField();\n\n              // When a gesture begins, blur the currently focused input\n              TextInput.State.blurTextInput(input);\n\n              // Store the id of this input so we can refocus it if gesture was cancelled\n              this.previouslyFocusedTextInput = input;\n            } else if (keyboardDismissMode === 'on-drag') {\n              Keyboard.dismiss();\n            }\n          } else {\n            onSwipeEnd && onSwipeEnd();\n\n            if (keyboardDismissMode === 'auto') {\n              if (indexAtSwipeEnd === currentIndex) {\n                // The index didn't change, we should restore the focus of text input\n                const input = this.previouslyFocusedTextInput;\n\n                if (input) {\n                  TextInput.State.focusTextInput(input);\n                }\n              }\n\n              this.previouslyFocusedTextInput = null;\n            }\n          }\n        }\n      )\n    ),\n    onChange(\n      this.nextIndex,\n      cond(neq(this.nextIndex, UNSET), [\n        // Stop any running animations\n        cond(clockRunning(this.clock), stopClock(this.clock)),\n        set(this.gestureX, 0),\n        // Update the index to trigger the transition\n        set(this.index, this.nextIndex),\n        set(this.nextIndex, UNSET),\n      ])\n    ),\n    cond(\n      eq(this.gestureState, State.ACTIVE),\n      [\n        cond(this.isSwiping, NOOP, [\n          // We weren't dragging before, set it to true\n          set(this.isSwiping, TRUE),\n          set(this.isSwipeGesture, TRUE),\n          // Also update the drag offset to the last progress\n          set(this.offsetX, this.progress),\n        ]),\n        // Update progress with previous offset + gesture distance\n        set(\n          this.progress,\n          I18nManager.isRTL\n            ? sub(this.offsetX, this.gestureX)\n            : add(this.offsetX, this.gestureX)\n        ),\n        // Stop animations while we're dragging\n        stopClock(this.clock),\n      ],\n      [\n        set(this.isSwiping, FALSE),\n        set(this.indexAtSwipeEnd, this.index),\n        this.transitionTo(\n          cond(\n            and(\n              // We should consider velocity and gesture distance only when a swipe ends\n              // The gestureX value will be non-zero when swipe has happened\n              // We check against a minimum distance instead of 0 because `activeOffsetX` doesn't seem to be respected on Android\n              // For other factors such as state update, the velocity and gesture distance don't matter\n              greaterThan(abs(this.gestureX), SWIPE_DISTANCE_MINIMUM),\n              greaterThan(\n                abs(this.extrapolatedPosition),\n                divide(this.layoutWidth, 2)\n              )\n            ),\n            // For swipe gesture, to calculate the index, determine direction and add to index\n            // When the user swipes towards the left, we transition to the next tab\n            // When the user swipes towards the right, we transition to the previous tab\n            round(\n              min(\n                max(\n                  0,\n                  sub(\n                    this.index,\n                    cond(\n                      greaterThan(this.extrapolatedPosition, 0),\n                      I18nManager.isRTL ? DIRECTION_RIGHT : DIRECTION_LEFT,\n                      I18nManager.isRTL ? DIRECTION_LEFT : DIRECTION_RIGHT\n                    )\n                  )\n                ),\n                sub(this.routesLength, 1)\n              )\n            ),\n            // Index didn't change/changed due to state update\n            this.index\n          )\n        ),\n      ]\n    ),\n    this.progress,\n  ]);\n\n  private getTranslateX = memoize(\n    (\n      layoutWidth: Animated.Node<number>,\n      routesLength: Animated.Node<number>,\n      translateX: Animated.Node<number>\n    ) =>\n      multiply(\n        // Make sure that the translation doesn't exceed the bounds to prevent overscrolling\n        min(\n          max(\n            multiply(layoutWidth, sub(routesLength, 1), DIRECTION_RIGHT),\n            translateX\n          ),\n          0\n        ),\n        I18nManager.isRTL ? -1 : 1\n      )\n  );\n\n  render() {\n    const {\n      layout,\n      navigationState,\n      swipeEnabled,\n      children,\n      removeClippedSubviews,\n      gestureHandlerProps,\n    } = this.props;\n\n    const translateX = this.getTranslateX(\n      this.layoutWidth,\n      this.routesLength,\n      this.translateX\n    );\n\n    return children({\n      position: this.position,\n      addListener: this.addListener,\n      removeListener: this.removeListener,\n      jumpTo: this.jumpTo,\n      render: children => (\n        <PanGestureHandler\n          enabled={layout.width !== 0 && swipeEnabled}\n          onGestureEvent={this.handleGestureEvent}\n          onHandlerStateChange={this.handleGestureEvent}\n          activeOffsetX={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n          failOffsetY={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n          {...gestureHandlerProps}\n        >\n          <Animated.View\n            removeClippedSubviews={removeClippedSubviews}\n            style={[\n              styles.container,\n              layout.width\n                ? {\n                    width: layout.width * navigationState.routes.length,\n                    transform: [{ translateX }] as any,\n                  }\n                : null,\n            ]}\n          >\n            {children}\n          </Animated.View>\n        </PanGestureHandler>\n      ),\n    });\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'row',\n  },\n});\n"]}